import InterRegular from "@fontsource/inter/files/inter-latin-400-normal.woff";
import InterBold from "@fontsource/inter/files/inter-latin-700-normal.woff";
import { Resvg } from "@resvg/resvg-js";
import type { APIContext } from "astro";
import { getCollection } from "astro:content";
import satori from "satori";
import { html } from "satori-html";

const dimensions = {
  width: 1200,
  height: 630,
};

interface Props {
  title: string;
  pubDate: Date;
}

export async function GET(context: APIContext) {
  const { title, pubDate } = context.props as Props;
  const date = pubDate.toLocaleDateString("en-US", {
    dateStyle: "full",
  });

  const markup = html`<div tw="bg-zinc-900 flex flex-col w-full h-full">
    <div tw="flex flex-col w-full h-4/5 p-10 justify-center">
      <div tw="text-zinc-400 text-2xl mb-6">${date}</div>
      <div
        tw="flex text-6xl w-full font-bold leading-snug tracking-tight text-transparent bg-red-400"
        style="background-clip: text; -webkit-background-clip: text; background: linear-gradient(90deg, rgb(0, 124, 240), rgb(0, 223, 216));"
      >
        ${title}
      </div>
    </div>
    <div
      tw="w-full h-1/5 border-t border-zinc-700/50 flex p-10 items-center justify-between text-2xl"
    >
      <div tw="flex items-center">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="40"
          height="40"
          fill="none"
          viewBox="0 0 500 500"
        >
          <path
            d="M0 0 C165 0 330 0 500 0 C500 165 500 330 500 500 C335 500 170 500 0 500 C0 335 0 170 0 0 Z "
            fill="#F0EEE6"
            transform="translate(0,0)"
          />
          <path
            d="M0 0 C6.96784101 5.80976901 12.68287941 12.03211096 17.47998047 19.77636719 C18.23794922 20.96552734 18.23794922 20.96552734 19.01123047 22.17871094 C20.18486738 24.03370928 21.33534811 25.90333242 22.47998047 27.77636719 C23.02525391 26.88175781 23.57052734 25.98714844 24.13232422 25.06542969 C28.96143452 17.27246104 34.07480838 10.38393319 40.47998047 3.77636719 C41.30369141 2.84244141 41.30369141 2.84244141 42.14404297 1.88964844 C54.71266679 -11.88630624 73.28785211 -17.64834143 91.37060547 -18.47753906 C112.2215937 -19.10886225 131.0084343 -14.59569449 147.47998047 -1.22363281 C148.13998047 -0.56363281 148.79998047 0.09636719 149.47998047 0.77636719 C149.80998047 -3.84363281 150.13998047 -8.46363281 150.47998047 -13.22363281 C169.28998047 -13.22363281 188.09998047 -13.22363281 207.47998047 -13.22363281 C207.47998047 41.22636719 207.47998047 95.67636719 207.47998047 151.77636719 C188.99998047 151.77636719 170.51998047 151.77636719 151.47998047 151.77636719 C151.47998047 145.83636719 151.47998047 139.89636719 151.47998047 133.77636719 C150.34560547 134.78699219 149.21123047 135.79761719 148.04248047 136.83886719 C146.5226505 138.15252892 145.00178713 139.46499585 143.47998047 140.77636719 C142.82900391 141.36289062 142.17802734 141.94941406 141.50732422 142.55371094 C136.90618694 146.46334781 132.08077449 149.1345565 126.60498047 151.58886719 C125.65171875 152.02392578 125.65171875 152.02392578 124.67919922 152.46777344 C107.16827781 159.9372208 84.039961 159.20028346 66.41113281 152.55908203 C49.80068728 145.82670676 36.17876757 133.79384398 26.47998047 118.77636719 C26.47998047 118.11636719 26.47998047 117.45636719 26.47998047 116.77636719 C23.49909295 119.66692478 20.69799806 122.63607553 17.97998047 125.77636719 C5.4550807 140.15184101 -9.00928532 149.12174718 -27.52001953 153.77636719 C-28.63763672 154.07542969 -29.75525391 154.37449219 -30.90673828 154.68261719 C-53.14345098 159.78689981 -78.87746904 158.91050634 -99.52001953 148.77636719 C-100.45458984 148.32261719 -101.38916016 147.86886719 -102.35205078 147.40136719 C-109.0806543 143.93825377 -114.75003897 139.64048049 -120.52001953 134.77636719 C-121.35017578 134.14085937 -122.18033203 133.50535156 -123.03564453 132.85058594 C-137.90058138 120.43976602 -147.18228742 100.57387531 -150.52001953 81.77636719 C-152.31761743 55.28349336 -146.99257769 33.21327453 -129.52001953 12.77636719 C-97.88918669 -23.22418824 -38.15440748 -30.714727 0 0 Z "
            fill="#010101"
            transform="translate(226.52001953125,192.2236328125)"
          />
          <path
            d="M0 0 C4.95857206 3.40843466 8.56615945 7.49656903 11.69921875 12.61328125 C12.11429687 13.28359375 12.529375 13.95390625 12.95703125 14.64453125 C17.61549387 23.89630317 17.18706341 36.41173405 14.81640625 46.29296875 C10.77702589 56.80605804 3.86885302 63.86139857 -6.30078125 68.61328125 C-11.69951525 70.50995878 -16.52302189 70.96689873 -22.17578125 70.92578125 C-22.97226074 70.9208667 -23.76874023 70.91595215 -24.58935547 70.91088867 C-30.27979563 70.79721977 -35.17917876 70.25944253 -40.30078125 67.61328125 C-40.98140625 67.27296875 -41.66203125 66.93265625 -42.36328125 66.58203125 C-50.12093705 62.23304239 -55.9559679 55.37665682 -59.41796875 47.203125 C-60.62378044 42.29984648 -60.80992298 37.58662587 -60.86328125 32.55078125 C-60.8780249 31.62894043 -60.89276855 30.70709961 -60.90795898 29.75732422 C-60.74834458 19.02397253 -57.0240202 11.49378689 -49.6640625 3.80859375 C-46.43898335 0.8127351 -43.23276792 -1.4286849 -39.30078125 -3.38671875 C-38.16640625 -3.98484375 -37.03203125 -4.58296875 -35.86328125 -5.19921875 C-23.57464662 -9.39238205 -10.74688118 -6.47732227 0 0 Z "
            fill="#EFEDE5"
            transform="translate(362.30078125,229.38671875)"
          />
          <path
            d="M0 0 C34.65 0 69.3 0 105 0 C105.99 5.28 106.98 10.56 108 16 C108.79706236 18.77359272 109.64983742 21.533903 110.625 24.25 C113.26820388 31.71504854 113.26820388 31.71504854 114 35 C112.4416992 34.2208496 110.88345654 33.4415828 109.32543945 32.66186523 C107.92383966 31.9616424 106.52130792 31.26328236 105.11791992 30.56665039 C100.9417483 28.48968228 96.79037026 26.37410502 92.66015625 24.20703125 C91.77102539 23.7466748 90.88189453 23.28631836 89.96582031 22.81201172 C88.21846277 21.90682006 86.47670755 20.99071767 84.74121094 20.06298828 C83.93586914 19.64903809 83.13052734 19.23508789 82.30078125 18.80859375 C81.59091064 18.43532959 80.88104004 18.06206543 80.1496582 17.67749023 C77.40951701 16.81390229 75.72537395 17.18119123 73 18 C71.27356124 19.39293812 71.27356124 19.39293812 69.8125 21.1875 C60.3979511 31.04746842 48.825749 33.97849798 35.5 34.5 C25.10160173 34.25344004 15.86736866 30.71994989 7.875 24.03515625 C1.3690276 16.97346538 0 9.34427205 0 0 Z "
            fill="#EEECE5"
            transform="translate(136,270)"
          />
          <path
            d="M0 0 C6.17995686 4.94396548 10.41975978 10.63545611 12.8125 18.25 C12.8125 19.57 12.8125 20.89 12.8125 22.25 C-7.9775 22.25 -28.7675 22.25 -50.1875 22.25 C-50.1875 14.77291815 -48.2696013 9.92481308 -43.4609375 4.19140625 C-31.51256958 -7.24067417 -14.03875053 -7.70754931 0 0 Z "
            fill="#EBE9E1"
            transform="translate(187.1875,215.75)"
          />
        </svg>
        <span tw="ml-3 text-zinc-400">eshaanagg.netlify.app/</span>
      </div>
      <div tw="flex items-center">
        // GitHub Avatar
        <img
          src="https://avatars.githubusercontent.com/u/96648934?s=160"
          tw="w-15 h-15 rounded-full"
        />
        <div tw="flex flex-col ml-4">
          <span tw="text-zinc-400">Eshaan Aggarwal</span>
          <span tw="text-blue-400">@eshaanagg</span>
        </div>
      </div>
    </div>
  </div>`;

  const svg = await satori(markup, {
    fonts: [
      {
        name: "Inter",
        data: Buffer.from(InterRegular),
        weight: 400,
      },
      {
        name: "Inter",
        data: Buffer.from(InterBold),
        weight: 700,
      },
    ],
    height: dimensions.height,
    width: dimensions.width,
  });

  const image = new Resvg(svg, {
    fitTo: {
      mode: "width",
      value: dimensions.width,
    },
  }).render();

  return new Response(image.asPng(), {
    headers: {
      "Content-Type": "image/png",
    },
  });
}

export const prerender = true;

export async function getStaticPaths() {
  const posts = await getCollection("blog");

  const paths = posts
    .filter((p) => !p.slug.includes("placements"))
    .map((post) => {
      return {
        params: {
          slug: post.slug,
        },
        props: {
          title: post.data.title,
          pubDate: post.data.updatedDate ?? post.data.pubDate,
        },
      };
    });

  return paths;
}
